<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Quite Meticulous Logic</title><link href="https://mikhas.github.io/blog/" rel="alternate"></link><link href="https://mikhas.github.io/blog/feeds/all.atom.xml" rel="self"></link><id>https://mikhas.github.io/blog/</id><updated>2024-08-20T00:00:00+02:00</updated><entry><title>How objects are constructed and set up in QML</title><link href="https://mikhas.github.io/blog/multi-phase-construction.html" rel="alternate"></link><published>2024-08-20T00:00:00+02:00</published><updated>2024-08-20T00:00:00+02:00</updated><author><name>Michael Hasselmann</name></author><id>tag:mikhas.github.io,2024-08-20:/blog/multi-phase-construction.html</id><summary type="html">&lt;p class="first last"&gt;A brief introduction to making custom types in QML, and how the multi-phase object construction works in practice.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="making-a-new-type"&gt;
&lt;h2&gt;Making a new type&lt;/h2&gt;
&lt;p&gt;Here's how you derive a new class from a base class in pure QML, with a public
API of two mandatory properties. They fill the role of constructor parameters:&lt;/p&gt;
&lt;pre class="code qml literal-block"&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;QtQuick&lt;/span&gt;

&lt;span class="nx"&gt;QtObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;required&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt; &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;
    &lt;span class="nx"&gt;required&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="nx"&gt;iconSource&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The name of the new class, or QML component, is derived from the file name. So
if the file name is &lt;tt class="docutils literal"&gt;Derived.qml&lt;/tt&gt;, the new type will be available under
&lt;tt class="docutils literal"&gt;Derived&lt;/tt&gt;. This behaviour can be controlled in a special module file called
&lt;tt class="docutils literal"&gt;qmldir&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;We can now instantiate an object from the component:&lt;/p&gt;
&lt;pre class="code qml literal-block"&gt;
&lt;span class="nx"&gt;Derived&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;amount:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="k"&gt;iconSource:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;other/path/to/icon.png&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;QML object construction could be roughly translated to Python like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Derived&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;icon_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/path/to/icon.png&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What's unusual perhaps is that the constructor takes no arguments. Instead
&lt;tt class="docutils literal"&gt;amount&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;icon_path&lt;/tt&gt; are set on the object after instantiation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="multi-phase-construction"&gt;
&lt;h2&gt;Multi-phase construction&lt;/h2&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;How the QML engine internally constructs objects is much more complicated.
The information presented here serves as a conceptual overview only.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In the first phase of construction, the QML engine calls a hidden constructor and injects the &lt;tt class="docutils literal"&gt;parent&lt;/tt&gt;
argument. We can imagine the constructor to be defined like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Derived&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QObject&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;QObject&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We now have an instance of our &lt;tt class="docutils literal"&gt;Derived&lt;/tt&gt; component, but the properties that
we declared as required aren't initialised just yet. The QML engine would
complain with a fatal error if we tried to use the instance in this state.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;parent&lt;/tt&gt; points to the object that will take ownership over this new
object. In QML, this parent-child relationship is commonly expressed through
nesting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;Parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;          &lt;span class="c1"&gt;// owns the Child instance&lt;/span&gt;
    &lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// `parent` property will refer to Parent instance&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the second phase, the initial state of the new object is set up. This
happens by evaluating the expressions that are bound to the properties, as we
already saw:&lt;/p&gt;
&lt;pre class="code qml literal-block"&gt;
&lt;span class="nx"&gt;Derived&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;amount:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="k"&gt;iconSource:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;other/path/to/icon.png&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Evaluation happens property by property and in random order. This has far
reaching consequences! Properties can depend on other properties and the QML
engine will try its best to resolve the dependencies. It's up to the developer
however to prevent circular dependencies:&lt;/p&gt;
&lt;pre class="code qml literal-block"&gt;
&lt;span class="nx"&gt;Derived&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;amount:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;iconSource&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="c1"&gt;// Don't #1
&lt;/span&gt;    &lt;span class="k"&gt;iconSource:&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nx"&gt;png&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="c1"&gt;// Don't #2
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The QML engine cannot resolve this. Individually, each property and their
dependency on the other property would be fine. Combined however, this spells
doom and we'll be greeted by the infamous binding loop warning:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;QML Derived: Binding loop detected for property &amp;quot;amount&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not all binding loops can be detected by the engine. When that happens, the
application will either hang or crash.&lt;/p&gt;
&lt;p&gt;In the third phase, when all bound property expressions have been evaluated
once, &lt;tt class="docutils literal"&gt;Component.onCompleted&lt;/tt&gt; will be called. This allows us to run code
after the object has been constructed but before it'll be used by others.&lt;/p&gt;
&lt;pre class="code qml literal-block"&gt;
&lt;span class="nx"&gt;Derived&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;amount:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="k"&gt;iconSource:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;other/path/to/icon.png&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;Component.onCompleted:&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="k"&gt;amount:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;iconSource:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${iconSource}&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We can also attach new properties to an existing type:&lt;/p&gt;
&lt;pre class="code qml literal-block"&gt;
&lt;span class="nx"&gt;Derived&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="k"&gt;label:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A new property&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;amount:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
    &lt;span class="k"&gt;iconSource:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;path/to/icon.png&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;Component.onCompleted:&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="k"&gt;label:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This triggers an additional construction phase: Because of the new property,
the QML engine has to derive a new implicit type from our original &lt;tt class="docutils literal"&gt;Derived&lt;/tt&gt;
component. This new type contains the injected &lt;tt class="docutils literal"&gt;label&lt;/tt&gt; property. As a new
type, it also has its own &lt;tt class="docutils literal"&gt;Component.onCompleted&lt;/tt&gt; handler which will run
after &lt;tt class="docutils literal"&gt;label&lt;/tt&gt; has been evaluated once.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="recursive-construction"&gt;
&lt;h2&gt;Recursive construction&lt;/h2&gt;
&lt;p&gt;It is not guaranteed that all construction phases run one after another. For
instance, object &lt;tt class="docutils literal"&gt;A&lt;/tt&gt; could be created before object &lt;tt class="docutils literal"&gt;B&lt;/tt&gt;, but properties
will be evaluated for &lt;tt class="docutils literal"&gt;B&lt;/tt&gt; before &lt;tt class="docutils literal"&gt;A&lt;/tt&gt;'s property are checked. Therefore,
&lt;tt class="docutils literal"&gt;B&lt;/tt&gt; could reach full initialisation before &lt;tt class="docutils literal"&gt;A&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;In the general case, innermost objects will be constructed before the other
objects:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;Ancestor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// last to be fully constructed&lt;/span&gt;
    &lt;span class="nx"&gt;Parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// second to be fully constructed&lt;/span&gt;
        &lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;// first to be fully construced&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In a typical QML application with a graphical interface, the outermost object
would be the &lt;tt class="docutils literal"&gt;ApplicationWindow&lt;/tt&gt;, so it'ill be constructed last. The
recursive construction spans all components nested within, with each component
following the multi-phase construction process.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Starter Kit"></category><category term="QML"></category></entry></feed>